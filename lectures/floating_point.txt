floating point is a scientific way of representing  real number, 

it consists of mantisa(for representing number > 1)
and exponent(to represent numbers < 1)

left most bit needed to represent sign of real number

after it, floating point is placed

`exponent` - specifies how far to the right, floating point should be moved in order to represent certain value

the number of bits in the exponent governs the range of the values that can be represented

the number of bits  in mantisa, governs precission, accuracy of the number

|------------------------------------------------------------------------|
|              IEEE 754 32 bit  floating point binary                    |
|------------------------------------------------------------------------|

sign |   exponent       |                 mantisa                        |
bit
[]   | [][][][][][][][] | [][][][][][][][][][][][][][][][][][][][][][][] |

1bit |     8 bits       |                  23 bits                       |

|------------------------------------------------------------------------|
|              Example 1: 19.59375 into IEEE 754 32 bit floating point 32                   |
|------------------------------------------------------------------------|

|------------------------------------------------------------------------|
| 1. determin the sign (positive 0; negative 1)
|------------------------------------------------------------------------|

[0]|[][][][][][][][]|[][][][][][][][][][][][][][][][][][][][][][] 

|------------------------------------------------------------------------|
| 2. covert number to pure binary
|------------------------------------------------------------------------|

2.1 denary part

19 // 2 = 9 reminder 1
9  // 2 = 4 reminder 1
4  // 2 = 2 reminder 0
2  // 2 = 1 reminder 0
1  // 2 = 1  reminder 1

2.2 fractional part
.59375 * 2 == 1.18750   1
.1875  * 2 == .3750     0
.375   * 2 == .750      0
.75    * 2 == 1.5       1
.5     * 2 == 1.0       1

           |16|8|4|2|1|.|0.5|0.25|0.125|0.0625|0.03125|
19.59375 =   1 0 0 1 1 .  1    0     0     1      1   |
|------------------------------------------------------------------------|
| 3. Normalise to determine the mantissa and the unbiassed exponent(place binary point after leftmst 1
|------------------------------------------------------------------------|

	1 . 0 0 1 1 1 0 0 1 1  x 2^2

|------------------------------------------------------------------------|
| 4. Determine biased exponent(add 127 and convert to unsigned binary int)
|------------------------------------------------------------------------|

	4 + 127 = 131(10) (bin)=> 


	128 | 64 | 32 | 16 | 8 | 4 | 2 | 1 | 
	 1     0    0    0   0   0   1   1

	131 / 2  = 65  rem 1 
	65  / 2  = 32  rem 1
	32  / 2  = 16  rem 0
	16  / 2  = 8   rem 0 
	8   / 2  = 4   rem 0
	4   / 2  = 2   rem 0
	2   / 2  = 1   rem 0
	1   / 2  = 0   rem 1


|------------------------------------------------------------------------|
| 5. remove leading 1 from the mantisa(remove the leftmost 1)
|------------------------------------------------------------------------|

	1 . 0 0 1 1 1 0 0 1 1  =>  0 0 1 1 1 0 0 1 1

|------------------------------------------------------------------------|
| 5. Example 2: 0.09375 to IEEE 754  32 bit floating point
|------------------------------------------------------------------------|
1. sign 

 	sign = 0

2. covert number to pure binary 
	2.1 denary part
		0 // 2 = 0
	2.2 fractional part
	covert number to pure binary
	.09375 * 2 = .18750   => 0
	.1875 * 2 = .375      => 0
	.375  * 2 = .75       => 0
	.75   * 2 = 1.5       => 1
	.5    * 2 = 1.0       => 1
--------------------------------------
	0.09375(dec) => 0.00011(bin) 
--------------------------------------

3. Normalise, unbiased exponent
		
	mantisa = 1.1 * 2^(-4) minus 4 because we moved  point to the right 4 positions

4. Determine biased exponent
 
 	-4 + 127 = 123(dec) = 01111011(bin)

	| 64| 32 | 16 | 8 | 4 | 2 | 1
	  1   1    1    1   0   1   1

5. removing leading 1 from mantisa
	mantisa = 1

6. assembling FP 32  bit
|sign|   exponent             |          mantisa                            |
| [0]|[0][1][1][1][1][0][1][1]|[1][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0] |


|------------------------------------------------------------------------|
| 5. Example 3: -123.3 to IEEE 754  32 bit floating point
|------------------------------------------------------------------------|
1. sign 

 	sign = 1

2. covert number to pure binary 
	2.1 denary part

		123(dec) = 1111011 (bin)

	2.2 fractional part
	covert number to pure binary
	.3 * 2 = .6 		  => 0

	.6 * 2 = 1.2          => 1		|
	.2 * 2 = .4			  => 0		|
	.4 * 2 = .8			  => 0		|
	.8 * 2 = 1.6		  => 1		V

	.6 * 2 = 1.2		  => 1
	.2 * 2 = .4			  => 0
	.4 * 2 = .8			  => 0
	.8 * 2 = 1.6		  => 1
	...

	--------------------------------------
	123.3(dec) => 1111011.0100110011001... (bin)
	--------------------------------------
	
	

3. Normalise, unbiased exponent
		
	mantisa = 1.1110110100110011001... * 2^(6) + 6 because we moved  point to the left 6 positions

4. Determine biased exponent
 
 	6 + 127 = 133(dec) = 1000 0101

	128| 64| 32 | 16 | 8 | 4 | 2 | 1
	 1   0    0   0    0   1   0   1

5. removing leading 1 from mantisa
	mantisa = 1

5.x round mantisa
to round mantisa: 1110110100110011001... add + 1 to last bit if its 1 otherwise: chop

	--------------------------------------
	1110 1101 0011 0011 0011 001 + 1 =>  1110 1101 0011 0011 0011 010
	--------------------------------------



6. assembling FP 32  bit
|sign  |   exponent   |          mantisa            |
| 1    |1000 0101     | 1110 1101 0011 0011 0011 010|


|------------------------------------------------------------------------|
| 5. Example 4: binary IEEE 754  32 bit floating point to denary 
  0 1000 0100 1101 0100 0000 0000 0000 000
|------------------------------------------------------------------------|

1. Determine the sign of denary
	sign (leftmost bit) = 0 = +

2. Determine the exponent in denary
	128	64   32 16  8   4  2 1
	1   0    0   0  0   1  0 0

	128 + 0 + 0 + 0 +0 +4 + 0  = 132
	--------------------------------------
	1000 0100(bin) =  132 (dec)
	--------------------------------------

3. Remove bias from exponent
	uexp = exp - 127 =  132 - 127 = 5 

4. convert mantisa to denary:

	mantisa(bin) = 1101 0100

	|0.5 | 0.25 | 0.125 | 0.0625 | 0.031250 | 0.015625|
	  1    1      0       1         0          1

	mantisa(dec) = 0.5 + 0.25 + 0.0625 + 0.015625 = 0.828125



5. add 1 to mantisa and include the sign
   
   mantisa (dec) = 1.828125
   sign is 0 for `positive` - not shown

6. Calculate final result

   1.828125 x 2^5 = 58.5










